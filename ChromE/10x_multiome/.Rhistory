for(gene in rownames(avg_expression)){
chrom_expression_table[[cell_type]][[gene, "expression"]] <-  avg_expression[[gene, cell_type]] # this moves the expression over
}
}
### Sliding Window to better see the expression ###
for(cell_type in names(chrom_expression_table)){
chrom_expression_table[[cell_type]]$expression <- rollmax(chrom_expression_table[[cell_type]]$expression, k = k, fill = 0)
}
## Setting range of the heatmap
if(is.null(plot.range) == FALSE){
col.range <- plot.range
}else{
all.range <- c()
for(cell_type in names(chrom_expression_table)){
all.range <- c(all.range, range(chrom_expression_table[[cell_type]]$expression))
}
col.range <- range(all.range) # Get the range of numbers from the table
}
### Split each cell type based on chromosome ###
for(cell_type in names(chrom_expression_table)){
chrom_expression_table[[cell_type]] <- split(chrom_expression_table[[cell_type]], chrom_expression_table[[cell_type]]$chr) # split based on the chromosome
for(c in names(chrom_expression_table[[cell_type]])){
chrom_expression_table[[cell_type]][[c]] <- arrange(chrom_expression_table[[cell_type]][[c]], order) # re-order just in case
}
}
### Optionally order the table if there's a specific order you want
if(is.null(order) == FALSE){
chrom_expression_table <- chrom_expression_table[ order ]
}
### Combine Based on chromosomes ###
chr_expr_table <- list()
for(c in names(chrom_expression_table[[1]])){
chr_expr_table[[c]] <- data.frame(row.names = rownames(chrom_expression_table[[1]][[c]])) # this creates the dataframe
for(cell_type in names(chrom_expression_table)){
chr_expr_table[[c]][cell_type] <- chrom_expression_table[[cell_type]][[c]]$expression
}
}
### Cleanup Table for Plotting ###
for(c in names(chr_expr_table)){
chr_expr_table[[c]] <- t( chr_expr_table[[c]] )
}
### Plotting Table ###
col_fun <- colorRamp2(seq(col.range[[1]], col.range[[2]], length.out = 50), viridis(50)) # make colors for the range of numbers
# Plot all the individual chromosome heatmaps
chr_plots <- NULL # create an empty heatmap list object
for(c in names(chr_expr_table)){
# only keep last legend
keep.legend = FALSE
if(c == end(names(chr_expr_table))[[1]]){keep.legend = TRUE}
# generate heatmap
chr_plots = chr_plots + Heatmap(chr_expr_table[[c]],
col = col_fun,
cluster_rows = F, cluster_columns = F,
show_column_names = F, name = " ",
show_heatmap_legend = keep.legend)
}
# Now combine all the individual heatmaps together
plt <- draw(chr_plots, ht_gap = unit(3, "points"))
return(plt)
}
levels(as.factor(sc$Mouse_Data_Marrow_10x_MACA$Developmental_potential))
# Normalize and scale the datasets
sc <- lapply(sc.list, SCTransform)
levels(as.factor(sc$Mouse_Data_Marrow_10x_MACA$Developmental_potential))
order <- c("Multipotent", "Unipotentprogenitor", "Differentiatedcell")
# Mouse Marrow focus
plt <- ChromE(seurat_object, m.table,"phenotype",assay = "SCT", k = 250, plot.range = c(0,400))
plt
levels(as.factor(sc$Human_Data_Sample_Blood_AllMerged$Developmental_potential))
order <- c("Multipotent", "Differentiatedcell")
# Mouse Marrow focus
plt <- ChromE(sc$Human_Data_Sample_Blood_AllMerged, h.table, order = order,"Developmental_potential",assay = "SCT", k = 250, plot.range = c(2,30))
png("Human_Data_Sample_Blood_AllMerged_ChromE.png", units = "in", height = 3, width = 12, res = 300)
plt
dev.off()
plt
levels(chr_table$chr)
levels(as.factor(chr_table$chr))
levels(as.factor(m.table$chr))
levels(as.factor(h.table$chr))
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
levels(ref_table$chr)
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
levels(ref_table$chr)
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
levels(ref_table)
levels(ref_table$chr
)
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
levels(ref_table$chr)
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
str_detect(ref_table$chr, "_")
ref_table
ref_table$chr
!str_detect(ref_table$chr, "_")
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
# remove the chr so that it orders properly based on the chromosome
ref_table$chr <- str_remove(ref_table$chr, "chr")
head(ref_table)
levels(ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
names(ref_table.split)
# sort all the tables based on the chromStart
ref_table.split <- lapply(ref_table.split, arrange, start)
# adding a new column with order
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]]))
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
# get rid of duplicates!
ref_table[!duplicated(ref_table$gene),]
levels(ref_table$chr)
# save
write_delim(ref_table, file = "GRCh38_ordered_v2.txt")
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("mm10_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# add headers
colnames(ref_table) <- c("Ensembl_id", "chr", "start", "end", "gene")
head(ref_table)
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
# remove the chr so that it orders properly based on the chromosome
ref_table$chr <- str_remove(ref_table$chr, "chr")
head(ref_table)
#split based on chromosome
ref_table.split <- split(ref_table, ref_table$chr)
names(ref_table.split)
# sort all the tables based on the start position
ref_table.split <- lapply(ref_table.split, arrange, start)
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]])) # adds an expression column
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
ref_table <- ref_table[!duplicated(ref_table$gene),]
levels(ref_table$chr)
# save
write_delim(ref_table, file = "mm10_ordered_v2.txt")
h.table <- read.table("GRCh38_ordered_v2.txt", sep = " ", header = T) # read table
h.table <- h.table[!duplicated(h.table$gene),] # remove any duplicate genes
rownames(h.table) <- h.table$gene # set the rownames to genes
head(h.table) # check to make sure table looks good
m.table <- read.table("mm10_ordered_v2.txt", sep = " ", header = T) # read table
m.table <- m.table[!duplicated(m.table$gene),] # remove any duplicate genes
rownames(m.table) <- m.table$gene # set the rownames to genes
head(m.table) # check to make sure table looks good
levels(h.table$chr)
levels(as.factor(h.table$chr))
levels(as.factor(m.table$chr))
levels(ref_table)
levels(ref_table$chr)
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
# remove the chr so that it orders properly based on the chromosome
ref_table$chr <- str_remove(ref_table$chr, "chr")
head(ref_table)
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr, "_"), ]
head(ref_table)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
names(ref_table.split)
ref_table[!str_detect(ref_table$chr, "_"), ]
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[!str_detect(ref_table$chr,pattern = "_"), ]
head(ref_table)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
names(ref_table.split)
!str_detect(ref_table$chr,pattern = "_")
ref_table[!str_detect(ref_table$chr,pattern = "_"), ]
str_detect(ref_table$chr,pattern = "_")
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[(!str_detect(ref_table$chr,pattern = "_")), ]
head(ref_table)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
names(ref_table.split)
?str_detect
# remove alternative spliced chromosomes. they have an underscore so we can removed them based on that
ref_table <- ref_table[str_detect(ref_table$chr,pattern = "_", negate = T), ]
head(ref_table)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
names(ref_table.split)
str_detect(names(ref_table.split),pattern = "_", negate = T)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
levels(ref_table)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
levels(ref_table$chr)
str_detect(levels(ref_table$chr), "_", negate = T)
# remove the alternate chromosomes
levels(ref_table) <- str_detect(names(ref_table.split),pattern = "_", negate = T)
levels(ref_table)[str_detect(levels(ref_table$chr), "_", negate = T)]
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
levels(ref_table$chr)[str_detect(levels(ref_table$chr), "_", negate = T)]
# remove the alternate chromosomes
levels(ref_table) <- levels(ref_table$chr)[str_detect(levels(ref_table$chr), "_", negate = T)]
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
# remove the alternate chromosomes
levels(ref_table$chr) <- levels(ref_table$chr)[str_detect(levels(ref_table$chr), "_", negate = T)]
droplevels(str_detect(levels(ref_table$chr), "_"))
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr23", ref_table$chr)
ref_table$chr <- sub("chrM", "chr25", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
ref_table$chr <- sub("chrY", "chr24", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr23", ref_table$chr)
ref_table$chr <- sub("chrY", "chr24", ref_table$chr)
ref_table$chr <- sub("chrM", "chr25", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr23", ref_table$chr)
ref_table$chr <- sub("chrY", "chr24", ref_table$chr)
ref_table$chr <- sub("chrM", "chr25", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
# sort all the tables based on the chromStart
ref_table.split <- lapply(ref_table.split, arrange, start)
# adding a new column with order
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]]))
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
# get rid of duplicates!
ref_table[!duplicated(ref_table$gene),]
# save
write_delim(ref_table, file = "GRCh38_ordered_v3.txt")
levels(ref_table$chr)
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("mm10_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# add headers
colnames(ref_table) <- c("Ensembl_id", "chr", "start", "end", "gene")
head(ref_table)
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr23", ref_table$chr)
ref_table$chr <- sub("chrY", "chr24", ref_table$chr)
ref_table$chr <- sub("chrM", "chr25", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
ref_table <- read.table("mm10_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# add headers
colnames(ref_table) <- c("Ensembl_id", "chr", "start", "end", "gene")
head(ref_table)
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr20", ref_table$chr)
ref_table$chr <- sub("chrY", "chr21", ref_table$chr)
ref_table$chr <- sub("chrM", "chr22", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
# sort all the tables based on the chromStart
ref_table.split <- lapply(ref_table.split, arrange, start)
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]])) # adds an expression column
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
ref_table <- ref_table[!duplicated(ref_table$gene),]
# save
write_delim(ref_table, file = "mm10_ordered_v3.txt")
h.table <- read.table("GRCh38_ordered_v3.txt", sep = " ", header = T) # read table
h.table <- h.table[!duplicated(h.table$gene),] # remove any duplicate genes
rownames(h.table) <- h.table$gene # set the rownames to genes
head(h.table) # check to make sure table looks good
m.table <- read.table("mm10_ordered_v3.txt", sep = " ", header = T) # read table
m.table <- m.table[!duplicated(m.table$gene),] # remove any duplicate genes
rownames(m.table) <- m.table$gene # set the rownames to genes
head(m.table) # check to make sure table looks good
levels(as.factor(sc$Mouse_Data_Marrow_10x_MACA$Developmental_potential))
order <- c("Multipotent", "Unipotentprogenitor", "Differentiatedcell")
# Mouse Marrow focus
plt <- ChromE(seurat_object, m.table,"phenotype",assay = "SCT", k = 250, plot.range = c(0,400))
m.table <- read.table("mm10_ordered_v3.txt", sep = " ", header = T) # read table
m.table <- m.table[!duplicated(m.table$gene),] # remove any duplicate genes
rownames(m.table) <- m.table$gene # set the rownames to genes
head(m.table) # check to make sure table looks good
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("GRCh38_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# Rename the columns
colnames(ref_table) <- c("chr","start", "end", "gene", "type", "class", "source", "level", "inc")
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr23", ref_table$chr)
ref_table$chr <- sub("chrY", "chr24", ref_table$chr)
ref_table$chr <- sub("chrM", "chr25", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
# sort all the tables based on the chromStart
ref_table.split <- lapply(ref_table.split, arrange, start)
# adding a new column with order
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]]))
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
ref_table$chr <- str_replace(ref_table$chr, "chr", "")
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
# get rid of duplicates!
ref_table[!duplicated(ref_table$gene),]
# save
write_delim(ref_table, file = "GRCh38_ordered_v3.txt")
# load packages
library(tidyverse)
library(dplyr)
library(stringr)
ref_table <- read.table("mm10_knownGene.bed", header = F, sep = "\t", stringsAsFactors = T)
head(ref_table)
# add headers
colnames(ref_table) <- c("Ensembl_id", "chr", "start", "end", "gene")
head(ref_table)
#  Change the M, X, and Y to 23,24,25
ref_table$chr <- sub("chrX", "chr20", ref_table$chr)
ref_table$chr <- sub("chrY", "chr21", ref_table$chr)
ref_table$chr <- sub("chrM", "chr22", ref_table$chr)
# split based on chromosome
ref_table.split <-  split(ref_table, ref_table$chr)
# remove the alternate chromosomes
ref_table.split <- ref_table.split[str_detect(names(ref_table.split),pattern = "_", negate = T)]
names(ref_table.split)
# sort all the tables based on the chromStart
ref_table.split <- lapply(ref_table.split, arrange, start)
for(i in seq_along(ref_table.split)){
ref_table.split[[i]]$order <- 1:nrow(ref_table.split[[i]]) # adds the order column
ref_table.split[[i]]$expression <- rep(0, nrow(ref_table.split[[i]])) # adds an expression column
}
# combine tables again by row
ref_table <- bind_rows(ref_table.split)
head(ref_table)
ref_table$chr <- str_replace(ref_table$chr, "chr", "")
#arrange so that the chromosomes are in the correct order
ref_table$chr <- factor(ref_table$chr, levels = order(levels(as.factor(ref_table$chr))))
head(ref_table)
ref_table <- ref_table[!duplicated(ref_table$gene),]
# save
write_delim(ref_table, file = "mm10_ordered_v3.txt")
h.table <- read.table("GRCh38_ordered_v3.txt", sep = " ", header = T) # read table
h.table <- h.table[!duplicated(h.table$gene),] # remove any duplicate genes
rownames(h.table) <- h.table$gene # set the rownames to genes
head(h.table) # check to make sure table looks good
m.table <- read.table("mm10_ordered_v3.txt", sep = " ", header = T) # read table
m.table <- m.table[!duplicated(m.table$gene),] # remove any duplicate genes
rownames(m.table) <- m.table$gene # set the rownames to genes
head(m.table) # check to make sure table looks good
levels(as.factor(sc$Mouse_Data_Marrow_10x_MACA$Developmental_potential))
order <- c("Multipotent", "Unipotentprogenitor", "Differentiatedcell")
# Mouse Marrow focus
plt <- ChromE(seurat_object, m.table,"phenotype",assay = "SCT", k = 250, plot.range = c(0,400))
plt
levels(as.factor(sc$Human_Data_Sample_Blood_AllMerged$Developmental_potential))
order <- c("Multipotent", "Differentiatedcell")
# Mouse Marrow focus
plt <- ChromE(sc$Human_Data_Sample_Blood_AllMerged, h.table, order = order,"Developmental_potential",assay = "SCT", k = 250, plot.range = c(2,30))
png("Human_Data_Sample_Blood_AllMerged_ChromE.png", units = "in", height = 3, width = 12, res = 300)
plt
dev.off()
plt
# load libraries
library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(reticulate)
set.seed(1234)
setwd("C:/Users/suyma/OneDrive - Stanford/SR205_project/10x_multiome")
load("C:/Users/suyma/OneDrive - Stanford/SR205_project/10x_multiome/10x_multiome.RData")
# load libraries
library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(reticulate)
set.seed(1234)
idents.plot <- c("B naive", "B intermediate", "B memory",
"CD14 Mono", "CD16 Mono", "CD8 TEM", "CD8 Naive")
p1 <- CoveragePlot(
object = pbmc,
region = "MS4A1",
features = "MS4A1",
expression.assay = "SCT",
idents = idents.plot,
extend.upstream = 500,
extend.downstream = 10000
)
library(reticulate)
py_install(packages = "macs2", pip = T)
reticulate::pip_install()
system("pip" install --upgrade)
system("pip install --upgrade pip")
?conda_install
conda_install(packages = "macs2", channel = "bioconda")
conda_install(packages = "macs2", channel = "bioconda/label/cf201901")
conda_install(packages = "macs2", pip = T)
