Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
Heatmap(sc.p,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
#
Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
# remove rows that contain zeros
sc.p <- sc.p[rowSums(sc.p[])>0,]
Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
head(sc.p)
slice_max(sc.p, order_by = 'RNA.Mouse_Data_DirectProtocol_Neuron.rds')
top <- sc.p[order(apply(sc.p, 1, max), decreasing = T)[1:20],]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
# get top regulons
top <- sc.p[,order(apply(sc.p, 1, max), decreasing = T)[1:20]]
?apply
# get top regulons
top <- sc.p[,order(apply(sc.p, 2, max), decreasing = T)[1:20]]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
top
rm(top)
# get top regulons
top <- sc.p[,order(apply(sc.p, 2, max), decreasing = T)[1:20]]
head(top)
sc.p <- t(sc.p)
head(sc.p)
sc.p <- AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts") %>% as.data.frame() %>% scale()
# remove human column since its acting different
sc.p <- sc.p[,-1]
# remove rows that contain zeros
sc.p <- sc.p[rowSums(sc.p[])>0,]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
sc.p <- AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts") %>% as.data.frame() %>% scale()
# remove human column since its acting different
sc.p <- sc.p[,-1]
# remove rows that contain zeros
sc.p <- sc.p[rowSums(sc.p[])>0,]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
top_n(sc.p, 1)
colnames(sc.p)
slice_max(sc.p, order_by = 'RNA.Mouse_Data_DirectProtocol_Neuron.rds', 5)
sc.p[order('RNA.Mouse_Data_DirectProtocol_Neuron.rds'AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts"))]
AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts")
class(AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts"))
library(data.table)
sc.p <- AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts") %>% as.data.table()
head(sc.p)
# remove human column since its acting different
sc.p <- sc.p[,-1]
# remove rows that contain zeros
sc.p <- sc.p[rowSums(sc.p[])>0,]
Heatmap(sc.p,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
# get top regulons
top <- sc.p[,order(apply(sc.p, 2, max), decreasing = TRUE)[1:50]]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
# get top regulons
top <- sc.p[order(apply(sc.p, 1, max), decreasing = TRUE)[1:50],]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
head(top)
head(sc>p)
head(sc.p)
sc.p <- AverageExpression(sc.pluripotent, group.by = 'Dataset', slot = "counts") %>% as.data.frame() %>% scale()
# remove human column since its acting different
sc.p <- sc.p[,-1]
# remove rows that contain zeros
sc.p <- sc.p[rowSums(sc.p[])>0,]
# get top regulons
top <- sc.p[order(apply(sc.p, 1, max), decreasing = TRUE)[1:50],]
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 5),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
#col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = F,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = F,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
# get top regulons
top <- sc.p[order(apply(sc.p, 1, max), decreasing = TRUE)[1:20],]
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = F,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
cluster_rows = T,
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
show_row_dend = T,
row_dend_side = 'right',
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
show_row_dend = T,
row_dend_side = 'right',
row_dend_width = unit(25,'mm'),
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
Heatmap(top,
# heatmap color
col = viridis(5),
# Dataset parameters
column_names_side = 'top',
show_column_dend = F,
cluster_columns = T,
column_names_gp = gpar(fontsize = 10),
# Regulon Parameters
show_row_dend = T,
cluster_rows = F,
row_dend_side = 'right',
row_dend_width = unit(25,'mm'),
row_names_gp = gpar(fontsize = 10),
row_names_side = 'left',
)
library(Seurat)
library(SeuratDisk)
library(tidyverse)
library(ComplexHeatmap)
library(circlize)
library(viridis)
library(data.table)
library(patchwork)
library(stringi)
file_names <- list.files(pattern = "*.h5ad") %>% as.list()
sc.names <- lapply(file_names, str_remove, pattern = "_auc_processed.h5ad")
for(i in seq_along(file_names)){
Convert(source = file_names[[i]],
dest = paste0(sc.names[[i]], "_auc_processed.h5Seurat"),
overwrite = T)
}
file_names_h5S <- list.files(pattern = "*.h5Seurat") %>% as.list()
sc.list <- lapply(file_names_h5S, LoadH5Seurat, assays = "counts")
names(sc.list) <-  sc.names
# add tissue metadata
sc.list$Human_Data_Sample_Blood_AllMerged$tissue <- "Blood"
sc.list$Mouse_Data_DirectProtocol_Neuron$tissue <- "Neuronal"
sc.list$Mouse_Data_Marrow_10x_MACA$tissue <- "Marrow"
sc.list$Mouse_Data_Regev_SmartSeq.log2.TPM.Capitalized$tissue <- "intestine"
sc.list$Mouse_Data_StandardProtocol_Neuron$tissue <- "Neuronal"
# merge them all
sc <- merge(sc.list[[1]], y = sc.list[-1], merge.data = T)
# split based on human vs mouse
human_datasets <- "Human_Data_Sample_Blood_AllMerged.rds"
Idents(sc) <- 'Dataset'
sc.human <- subset(sc, idents = human_datasets)
sc.mouse <- subset(sc, idents = human_datasets, invert = T)
sc <- list(human = sc.human,
mouse = sc.mouse)
head(sc$mouse@meta.data)
# we can use the Scale Data function to calculate the Z score
sc$mouse <- SCTransform(sc$mouse, assay = 'RNA',vars.to.regress = c("Dataset", "scRNAseq_platform"))
sc.table <- AverageExpression(sc$mouse, group.by = c("Developmental_potential", "tissue", 'phenotype'), assays = "SCT", slot = "scale.data")
sc.table <- sc.table$SCT %>% as.data.frame()
# change order
sc.table <- sc.table[,c("Pluripotent_Neuronal_ESC",
"Multipotent_Neuronal_EMN","Multipotent_Neuronal_LMN","Multipotent_Neuronal_NP","Multipotent_Neuronal_PNP","Multipotent_Neuronal_PVNP",
"Multipotent_intestine_Stem","Multipotent_intestine_TA",
"MultiOligoProgenitor_Marrow_Stem_Progenitors",
"Unipotentprogenitor_intestine_Enterocyte_Progenitor_Early","Unipotentprogenitor_intestine_Enterocyte_Progenitor_Late","Unipotentprogenitor_Marrow_Erythroid_progenitors_Erythroblasts","Unipotentprogenitor_Marrow_Granulocyte_progenitors","Unipotentprogenitor_Marrow_Immature_B","Unipotentprogenitor_Marrow_Megakaryocyte_progenitors","Unipotentprogenitor_Marrow_Monocyte_progenitors", "Unipotentprogenitor_Marrow_Monocytes","Unipotentprogenitor_Neuronal_MNP",
"Differentiatedcell_intestine_Endocrine","Differentiatedcell_intestine_Enterocyte",
"Differentiatedcell_intestine_Goblet","Differentiatedcell_intestine_Paneth",
"Differentiatedcell_intestine_Tuft", "Differentiatedcell_Marrow_Erythrocytes",
"Differentiatedcell_Marrow_Granulocytes", "Differentiatedcell_Marrow_Macrophages")]
#generate metadata table
sample.list <- colnames(sc.table) %>% as.array()
stem.list <- str_extract(sample.list, pattern = "^[^_]+(?=_)") %>% as.array()
organ.list <- str_extract(sample.list, pattern = "(?<=_)[^_]+(?=_)") %>% as.array()
pheno.list <- str_extract(sample.list, pattern = "_[^_]+$") %>% str_remove("_") %>% as.array()
sc.meta <- data.table(sample = sample.list,
dev = stem.list,
organ = organ.list,
pheno = pheno.list)
sc.meta
# get top regulons based on developmental potential
Idents(sc$mouse) <- "Developmental_potential"
sc.markers <- FindAllMarkers(sc$mouse, features = rownames(sc$mouse), slot = 'scale.data', test.use = 'wilcox')
# split based on cluster
sc.markers.split <- split(sc.markers, sc.markers$cluster)
plot_regs <- c()
for(df in sc.markers.split){
plot_regs <- c( plot_regs, rownames(df[order(-df$avg_diff),])[1:10] )
}
plot_regs <- str_remove_all(plot_regs, "\\.\\d") %>% unique() #mremoves the .number that was in some of the regulons
#filter matrix for the regulons you've identified
sc.table <- sc.table[plot_regs,]
# rep color vector
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
setwd("C:/Users/suyma/OneDrive - Stanford/SR205_project/UCSC_reference")
a <- read.delim("GRCh38_ordered.txt")
a
a <- read.delim("GRCh38_ordered.txt", sep = " ")
a
rm(list = ls())
load("C:/Users/suyma/OneDrive - Stanford/SR205_project/10x_multiome/10x_multiome.RData")
library(SeuratDisk)
# load PBMC reference
reference <- LoadH5Seurat("pbmc_multimodal.h5seurat")
# load libraries
library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(reticulate)
set.seed(1234)
counts <- Read10X_h5('pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5')
fragpath <- "pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz"
library(SeuratDisk)
# load PBMC reference
reference <- LoadH5Seurat("pbmc_multimodal.h5seurat")
DefaultAssay(pbmc) <- "SCT"
# transfer cell type labels from reference to query
transfer_anchors <- FindTransferAnchors(
reference = reference,
query = pbmc,
normalization.method = "SCT",
reference.reduction = "spca",
recompute.residuals = FALSE,
dims = 1:50
)
predictions <- TransferData(
anchorset = transfer_anchors,
refdata = reference$celltype.l2,
weight.reduction = pbmc[['pca']],
dims = 1:50
)
pbmc <- AddMetaData(
object = pbmc,
metadata = predictions
)
# set the cell identities to the cell type predictions
Idents(pbmc) <- "predicted.id"
# set a reasonable order for cell types to be displayed when plotting
levels(pbmc) <- c("CD4 Naive", "CD4 TCM", "CD4 CTL", "CD4 TEM", "CD4 Proliferating",
"CD8 Naive", "dnT",
"CD8 TEM", "CD8 TCM", "CD8 Proliferating", "MAIT", "NK", "NK_CD56bright",
"NK Proliferating", "gdT",
"Treg", "B naive", "B intermediate", "B memory", "Plasmablast",
"CD14 Mono", "CD16 Mono",
"cDC1", "cDC2", "pDC", "HSPC", "Eryth", "ASDC", "ILC", "Platelet")
# build a joint neighbor graph using both assays
pbmc <- FindMultiModalNeighbors(
object = pbmc,
reduction.list = list("pca", "lsi"),
dims.list = list(1:50, 2:40),
modality.weight.name = "RNA.weight",
verbose = TRUE
)
# build a joint UMAP visualization
pbmc <- RunUMAP(
object = pbmc,
nn.name = "weighted.nn",
assay = "RNA",
verbose = TRUE
)
DimPlot(pbmc, label = TRUE, repel = TRUE, reduction = "umap") + NoLegend()
